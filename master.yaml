#!/bin/bash

until ! [[ -z $COREOS_PRIVATE_IPV4 ]]; do

		ENV=/etc/environment
		if [ -z "$ENV" ]; then
				echo usage: $0 /etc/environment
				exit 1
		fi
		# Test for rw
		sudo touch $ENV
		if [ $? -ne 0 ]; then
				echo exiting, unable to modify: $ENV
		fi
		echo "COREOS_PUBLIC_IPV4=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)" > /etc/environment
		echo "COREOS_PRIVATE_IPV4=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)" >> /etc/environment
		source /etc/environment

done

sed -e 's|--oem=ec2-compat|--from-ec2-metadata=http://169.254.169.254/ --from-file=/user_data.yml|g' -i'' /usr/share/oem/cloud-config.yml
iptables -A INPUT -p tcp --dport 8080 -s 192.168.0.1/16 -j ACCEPT
iptables -A INPUT -p tcp --dport 8080 -j DROP

cat > "/user_data.yml" <<EOF
#cloud-config

---
write-files:
  - path: /etc/conf.d/nfs
    permissions: '0644'
    content: |
      OPTS_RPC_MOUNTD=""
  - path: /opt/bin/wupiao
    permissions: '0755'
    content: |
      #!/bin/bash
      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
      [ -n "$1" ] && \
        until curl -o /dev/null -sIf http://${1}; do \
          sleep 1 && echo .;
        done;
      exit $?

coreos:
  etcd2:
    name: master.novalocal
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    advertise-client-urls: http://$COREOS_PRIVATE_IPV4:2379,http://$COREOS_PRIVATE_IPV4:4001
    initial-cluster-token: dacd120b-574f-4d31-8043-23316adcba8e
    listen-peer-urls: http://$COREOS_PRIVATE_IPV4:2380,http://$COREOS_PRIVATE_IPV4:7001
    initial-advertise-peer-urls: http://$COREOS_PRIVATE_IPV4:2380
    initial-cluster: master.novalocal=http://$COREOS_PRIVATE_IPV4:2380
    initial-cluster-state: new
  fleet:
    public-ip: $COREOS_PRIVATE_IPV4
    metadata: "role=master"
  flannel:
    interface: $COREOS_PRIVATE_IPV4
  units:
    - name: rpcbind.service
      enable: true
      command: start
    - name: rpc-statd.service
      enable: true
      command: start
    - name: setup-network-environment.service
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Documentation=https://github.com/kelseyhightower/setup-network-environment
        Requires=network-online.target
        After=network-online.target
        [Service]
        ExecStartPre=/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -P /opt/bin https://github.com/kelseyhightower/setup-network-environment/releases/download/v1.0.0/setup-network-environment
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot
    - name: docker-cache.service
      command: start
      content: |
        [Unit]
        Description=Docker cache proxy
        Requires=early-docker.service
        After=early-docker.service
        Before=early-docker.target
        [Service]
        Restart=always
        TimeoutStartSec=0
        RestartSec=5
        Environment="TMPDIR=/var/tmp/"
        Environment="DOCKER_HOST=unix:///var/run/early-docker.sock"
        ExecStartPre=-/usr/bin/docker kill docker-registry
        ExecStartPre=-/usr/bin/docker rm docker-registry
        ExecStartPre=/usr/bin/docker pull quay.io/devops/docker-registry:latest
        # GUNICORN_OPTS is an workaround for
        # https://github.com/docker/docker-registry/issues/892
        ExecStart=/usr/bin/docker run --rm --net host --name docker-registry \
          -e STANDALONE=false \
          -e GUNICORN_OPTS=[--preload] \
          -e MIRROR_SOURCE=https://registry-1.docker.io \
          -e MIRROR_SOURCE_INDEX=https://index.docker.io \
          -e MIRROR_TAGS_CACHE_TTL=1800 \
          quay.io/devops/docker-registry:latest
    - name: fleet.service
      command: start
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Unit]
            Requires=etcd2.service
            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.244.0.0/16", "Backend": {"Type": "vxlan"}}'
    - name: docker.service
      command: start
      drop-ins:
        - name: 51-docker-mirror.conf
          content: |
            [Unit]
            # making sure that docker-cache is up and that flanneld finished
            # startup, otherwise containers won't land in flannel's network...
            Requires=docker-cache.service flanneld.service
            After=docker-cache.service flanneld.service
            [Service]
            Environment=DOCKER_OPTS=' --registry-mirror=http://$COREOS_PRIVATE_IPV4:5000'
    - name: kube-apiserver.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=etcd2.service docker-cache.service fleet.service docker.service flanneld.service
        After=etcd2.service docker-cache.service fleet.service docker.service flanneld.service
        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v1.0.1/bin/linux/amd64/kube-apiserver
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-apiserver
        ExecStartPre=/opt/bin/wupiao $COREOS_PRIVATE_IPV4:2379/v2/machines
        ExecStart=/opt/bin/kube-apiserver \
          --service_account_key_file=/home/core/kube-serviceaccount.key \
          --service_account_lookup=false \
          --admission_control=NamespaceLifecycle,NamespaceAutoProvision,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota \
          --allow_privileged=true \
          --insecure_bind_address=0.0.0.0 \
          --insecure_port=8080 \
          --kubelet_https=true \
          --secure_port=6443 \
          --service-cluster-ip-range=10.100.0.0/16 \
          --etcd_servers=http://$COREOS_PRIVATE_IPV4:2379 \
          --public_address_override=$COREOS_PRIVATE_IPV4 \
          --logtostderr=true \
          --runtime_config=api/v1
        Restart=always
        RestartSec=10
    - name: kube-controller-manager.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        ExecStartPre=/usr/bin/wget -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v1.0.1/bin/linux/amd64/kube-controller-manager
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-controller-manager
        ExecStartPre=/opt/bin/wupiao $COREOS_PRIVATE_IPV4:8080
        ExecStart=/opt/bin/kube-controller-manager \
          --service_account_private_key_file=/home/core/kube-serviceaccount.key \
          --master=$COREOS_PRIVATE_IPV4:8080 \
          --pod_eviction_timeout=30s \
          --logtostderr=true
        Restart=always
        RestartSec=10
    - name: kube-scheduler.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        ExecStartPre=/usr/bin/wget -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v1.0.1/bin/linux/amd64/kube-scheduler
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-scheduler
        ExecStartPre=/opt/bin/wupiao $COREOS_PRIVATE_IPV4:8080
        ExecStart=/opt/bin/kube-scheduler \
          --master=$COREOS_PRIVATE_IPV4:8080
        Restart=always
        RestartSec=10
  update:
    group: alpha
    reboot-strategy: off
EOF

export COREOS_PUBLIC_IPV4
export COREOS_PRIVATE_IPV4

update_engine_client -update
